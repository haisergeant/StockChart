//
//  StockChartViewController.swift
//  StockChart
//
//  Created by Le Thanh Hai on 6/24/17.
//  Copyright (c) 2017 haile. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import BonMot
import SnapKit

protocol StockChartViewControllerInput {
    func display(viewModel: StockChartViewModel)
}

protocol StockChartViewControllerOutput {
    func load(request: StockChartRequest)
}

class StockChartViewController: BaseViewController {
    var output: StockChartViewControllerOutput!
    var router: StockChartRouter!
    
    // MARK: - Object lifecycle
    var stock: Stock
    
    
    var tableView = UITableView()
    
    var contents: [AnyObject]?
        
    
    var headerView: GraphView?
    
    init(stock: Stock) {
        self.stock = stock
        super.init()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func initialize() {
        StockChartConfigurator.sharedInstance.configure(viewController: self)
    }
    
    override func configureSubviews() {
        super.configureSubviews()
        self.view.addSubview(self.tableView)
    }
    
    override func configureLayout() {
        super.configureLayout()
        self.tableView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }
    
    override func configureContent() {
        super.configureContent()
        self.title = self.stock.symbol
        self.tableView.delegate = self
        self.tableView.dataSource = self
        
        self.tableView.rowHeight = UITableViewAutomaticDimension
        self.tableView.estimatedRowHeight = 140
        
        self.tableView.separatorStyle = .none
        self.navigationItem.backBarButtonItem?.title = ""
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.output.load(request: StockChartRequest(stock: self.stock))
    }
    
    override func shouldShowNavigationBar() -> Bool {
        return true
    }
}

extension StockChartViewController: StockChartViewControllerInput {
    func display(viewModel: StockChartViewModel) {
        self.contents = viewModel.contents
        
        if self.headerView == nil, let contents = self.contents as? [DayStockViewModel] {
            self.headerView = GraphView(data: contents)
            self.tableView.tableHeaderView = self.headerView
            self.headerView?.snp.makeConstraints { make in
                make.height.equalTo(200)
                make.width.equalTo(self.tableView.snp.width)
            }
            
        }
        self.tableView.reloadData()
    }
}

extension StockChartViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if let contents = self.contents {
            return contents.count
        }
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let contents = self.contents, contents.count > 0 {
            let item = contents[indexPath.row]
            let cell = StockChartCell()
            cell.configure(model: item)
            return cell
        }        
        return UITableViewCell()
    }
}

extension StockChartViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.tableView.deselectRow(at: indexPath, animated: true)
        if let stock = self.contents?[indexPath.row] as? DayStockViewModel {
            stock.selected.value = !stock.selected.value
            self.tableView.reloadRows(at: [indexPath], with: UITableViewRowAnimation.fade)
        }
    }
}



